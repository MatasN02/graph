import networkx as nx
import matplotlib.pyplot as plt

def is_eulerian(graph):
    return all(graph.degree(node) % 2 == 0 for node in graph.nodes)

def is_hamiltonian(graph):
    return any(nx.is_hamiltonian_path(graph))

def draw_graph(graph, title="Graph"):
    pos = nx.spring_layout(graph)
    nx.draw(graph, pos, with_labels=True, font_weight='bold')
    plt.title(title)
    plt.show()

# Example usage
if __name__ == "__main__":
    # Create a graph
    G = nx.Graph()
    G.add_edges_from([(1, 2), (1, 3), (2, 3), (2, 4), (3, 4), (4, 5), (5, 1)])

    # Check for Eulerian cycle
    if is_eulerian(G):
        print("The graph has an Eulerian cycle.")
    else:
        print("The graph does not have an Eulerian cycle.")

    # Check for Hamiltonian cycle
    if is_hamiltonian(G):
        print("The graph has a Hamiltonian cycle.")
    else:
        print("The graph does not have a Hamiltonian cycle.")

    # Draw the graph
    draw_graph(G)
